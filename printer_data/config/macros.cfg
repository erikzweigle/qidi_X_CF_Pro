[gcode_macro PRINT_START]
gcode:
  # Capture values passed from the slicer: bed temp, extruder temp, chamber temp
  {% set target_bed = params.BED|default("60")|int %}
  {% set target_extruder = params.EXTRUDER|default("200")|int %}
  {% set target_chamber = params.CHAMBER|default("37")|int %}

  # Home all axes
  BED_MESH_CLEAR
  CHOME                                                       # Conditional Home XYZ if not already homed
  

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if target_bed > 90 %}
    G1 Z75                                                     # move nozzle away
    M106 S255                                                  # Turn on part cooling fans 100% to circulate air
    M106 P2 S25                                                # Turn on auxillary fans 10% to circulate air
    M106 P3 S255                                               # Turn on carbon fans 100% to circulate air
    M190 S{target_bed}                                         # Set the target temp for the bed
    TEMPERATURE_WAIT SENSOR="temperature_sensor Enclosure_Thermistor" MINIMUM={target_chamber}   # Wait for chamber to reach desired temp
    Z_TILT_ADJUST                                              # Z level - Two Z-axis leadscrews
    BED_MESH_PROFILE LOAD=default                              # Load bed mesh hi temp
    G28 Z                                                      # Home Z
    G90                                                        # Absolute positioning

  # If the bed temp is not over 90c, heat the bed to the desired temp, and then begin
  {% else %}
    M190 S{target_bed}
    Z_TILT_ADJUST                                              # Z level - Two Z-axis leadscrews
    BED_MESH_PROFILE LOAD=default
    G28 Z
    G90                                                        # Absolute positioning                     
  {% endif %}

  # Heat the nozzle
  SMART_PARK                                                    # KAMP near object start
  M107                                                          # Turn off fans
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={target_extruder} # Heat the nozzle 
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_extruder}      # Do not wait for PID stabilization, begin ASAP

  # Start printing
  LINE_PURGE                                                    # KAMP 20 mm^3/s in front of object
   
[gcode_macro PRINT_END]
gcode:
    # M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-10.0 F3600                ; retract filament far enough to do Diamondback nozzle change while cool
    G91                            ; relative positioning

    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 40) %}
        {% set x_safe = 40.0 %}
    {% else %}
        {% set x_safe = -40.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 40) %}
        {% set y_safe = 40.0 %}
    {% else %}
        {% set y_safe = -40.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 100) %}
        {% set z_safe = 100.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    #   Provide clearance to part
    G0 X{x_safe} Y{y_safe} Z{z_safe} F3600             ; move nozzle to remove stringing
    TURN_OFF_HEATERS
    BED_MESH_CLEAR
    M106 P3 S255                   ; turn ON air filter fan
    G4 P180000                     ; wait for 180s (3 min)
    M107                           ; turn OFF air filter fan
    M117                           ; clear any messages



[gcode_macro CHOME]
description: Homes XYZ axis only if printer is in a non-homed state
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28
  {% endif %}

[gcode_macro UNLOAD_FILAMENT]
description: Unloads filament from toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
  G1 Z20                      ; move nozzle away
  M109 S{EXTRUDER_TEMP}       ; heat up the hotend
  M83                         ; set extruder to relative mode
  G1 E-10 F1800                ; quickly retract a small amount to elimate stringing
  G4 P200                     ; pause for a short amount of time
  G1 E-50 F300                ; retract slowly the rest of the way
  G1 E-20 F300
  M400                        ; wait for moves to finish
  M117 Unload Complete!

[gcode_macro LOAD_FILAMENT]
description: Loads new filament into toolhead
gcode:
  {% set EXTRUDER_TEMP = params.TEMP|default(230)|int %}
  M109 S{EXTRUDER_TEMP}       ; heat up the hotend
  M83                         ; set extruder to relative mode
  G1 E50 F300                 ; extrude slowly
  G1 E50 F300
  M400                        ; wait for moves to finish
  M117 Load Complete!

[gcode_macro CENTER]
description: Moves the toolhead to the center
gcode:
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y{x_center} F7800

[gcode_macro FRONT]
description: Moves the toolhead to the front
gcode:
  {% set x_center = printer.toolhead.axis_maximum.x|float / 2.0 %}
  {% set y_center = printer.toolhead.axis_maximum.y|float / 2.0 %}
  G90
  G1 X{x_center} Y10 F7800

[gcode_macro NOZZLE_PURGE]
description: Draw a purge line at the front left edge of the build plate
gcode:
  G0 X2.5 Y4 F3000 ; Go to front
  G0 Z0.15 ; Drop to bed
  M83 ; Set extruder to relative mode
  G1 X45 E15 F500 ; Extrude 25mm of filament in a 4cm line
  G1 E-0.5 F400 ; Retract a little
  G1 X85 F4000 ; Quickly wipe away from the filament line
  G1 Z0.3 ; Raise and begin printing.


[firmware_retraction]
retract_length: 0.75
retract_speed: 120
unretract_extra_length: 0
unretract_speed: 120


[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True   ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 10.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 10.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 100.0  ; custom dz value; the value in mm to lower the bed when moving to park position
variable_retract          : 1.0    ; the value to retract while PAUSE
variable_cancel_retract   : 10.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 80.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 80.0  ; unretract speed in mm/s
variable_speed_hop        : 20.0  ; z move speed in mm/s
variable_speed_move       : 100.0 ; move speed in mm/s
variable_park_at_cancel   : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : 150  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 150  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : True  ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:


[gcode_macro BLTOUCH_DEPLOY]
gcode:
  BLTOUCH_DEBUG COMMAND=pin_down

[gcode_macro BLTOUCH_RETRACT]
gcode:
  BLTOUCH_DEBUG COMMAND=pin_up

[gcode_macro update_git]
gcode:
    {% set message = params.MESSAGE|default() %}
    {% if message %}
        RUN_SHELL_COMMAND CMD=update_git_script_message PARAMS="'{params.MESSAGE}'"
    {% else %}
        RUN_SHELL_COMMAND CMD=update_git_script
    {% endif %}

[gcode_shell_command update_git_script]
command: bash -c "bash $HOME/klipper-backup/script.sh"
timeout: 90.0
verbose: True

[gcode_shell_command update_git_script_message]
command: bash -c "bash $HOME/klipper-backup/script.sh -c $0"
timeout: 90.0
verbose: True

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: BASE_CANCEL_PRINT
gcode:
  ##### get user parameters or use default #####
  {% set client = printer['gcode_macro _CLIENT_VARIABLE']|default({}) %}
  {% set allow_park = client.park_at_cancel|default(false)|lower == 'true' %}
  {% set retract = client.cancel_retract|default(10.0)|abs %}
  ##### define park position #####
  {% set park_x = "" if (client.park_at_cancel_x|default(none) is none)
            else "X=" ~ client.park_at_cancel_x %}
  {% set park_y = "" if (client.park_at_cancel_y|default(none) is none)
            else "Y=" ~ client.park_at_cancel_y %}
  {% set custom_park = park_x|length > 0 or park_y|length > 0 %}
  ##### end of definitions #####
  # restore idle_timeout time if needed
  {% if printer['gcode_macro RESUME'].restore_idle_timeout > 0 %}
    SET_IDLE_TIMEOUT TIMEOUT={printer['gcode_macro RESUME'].restore_idle_timeout}
  {% endif %}
  {% if (custom_park or not printer.pause_resume.is_paused) and allow_park %} _TOOLHEAD_PARK_PAUSE_CANCEL {park_x} {park_y} {% endif %}
  _CLIENT_RETRACT LENGTH={retract}
  TURN_OFF_HEATERS
  M106 S0
  M107
  {client.user_cancel_macro|default("")}
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  BED_MESH_CLEAR
  BASE_CANCEL_PRINT


[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

[gcode_macro M109]
description: skip wait for temperature stabilization of hotend
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   ; Wait for hotend temp (within 1 degree)
    {% endif %}


# [gcode_macro M191]
# gcode:
#    SET_HEATER_TEMPERATURE HEATER=Chamber TARGET={params.S}
#    TEMPERATURE_WAIT SENSOR="heater_generic heater_chamber" MINIMUM={params.S}
# [gcode_macro M141]
# gcode:
#     SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={params.S|default(0)}

# [gcode_macro M191]
# gcode:
#     {% set s = params.S|float %}
#     {% if s == 0 %}
#         # If target temperature is 0, do nothing
#         M117 Chamber heating cancelled
#     {% else %}
#         SET_HEATER_TEMPERATURE HEATER=chamber_heater TARGET={s}
#         # Orca: uncomment the following line if you want to use heat bed to assist chamber heating
#         # M140 S100
#         TEMPERATURE_WAIT SENSOR="heater_generic chamber_heater" MINIMUM={s-1} MAXIMUM={s+1}
#         M117 Chamber at target temperature
#     {% endif %}

